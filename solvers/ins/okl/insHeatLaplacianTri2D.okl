/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/
@kernel void insHeatLaplacianTri2D(const dlong Nelements,
                                @restrict const dlong * vmapM,
                                @restrict const dlong * vmapP,
                                @restrict const dfloat * sgeo,
                                @restrict const dfloat * vgeo,
                                @restrict const dfloat * Dmatrices,
                                @restrict const dfloat * LIFTT,
                                @restrict const dfloat * Tx,
                                @restrict const dfloat * Ty,
                                @restrict       dfloat * LT){

   for(dlong eo=0;eo<Nelements;eo+=p_NblockV;@outer(0)){

      @shared dfloat s_Tx[p_NblockV][p_Np];
      @shared dfloat s_Ty[p_NblockV][p_Np];
      @shared dfloat s_fluxTot[p_NblockV][p_Np*p_Nfaces];
//-------------------------------------------------------------------------
//Fill up Volume Arrays
      for(int es=0;es<p_NblockV;++es;@inner(1)){//For all elements in block
         for(int n=0;n<p_maxNodes;++n;@inner(0)){
            const dlong e = eo+es; //element in block
            if(e<Nelements && n<p_Np){
               const dlong id = n + p_Np*e; //Current Node
               const dfloat tx = Tx[id];
               const dfloat ty = Ty[id];

               s_Tx[es][n] = tx;
               s_Ty[es][n] = ty;
            }
         }
      }
//-------------------------------------------------------------------------
//Volume Calculations
      for(int es=0;es<p_NblockV;++es;@inner(1)){//For all elements in block
         for(int n=0;n<p_maxNodes;++n;@inner(0)){
            const dlong e = eo+es; //element in block
            if(e<Nelements && n<p_Np){
               const dlong id = n +p_Np*e; //Current Node
               // prefetch geometric factors (constant on triangle)
               const dfloat drdx = vgeo[e*p_Nvgeo + p_RXID];
               const dfloat drdy = vgeo[e*p_Nvgeo + p_RYID];
               const dfloat dsdx = vgeo[e*p_Nvgeo + p_SXID];
               const dfloat dsdy = vgeo[e*p_Nvgeo + p_SYID];

               // compute 'r' and 's' derivatives of Tx and Ty at node n
               dfloat dTxdr = 0.f;
               dfloat dTxds = 0.f;
               dfloat dTydr = 0.f;
               dfloat dTyds = 0.f;

               #pragma unroll p_Np
                  for(int i=0;i<p_Np;++i){
                     const dfloat Drni = Dmatrices[n+i*p_Np+0*p_Np*p_Np];
                     const dfloat Dsni = Dmatrices[n+i*p_Np+1*p_Np*p_Np];

                     const dfloat tx = s_Tx[es][i];
                     const dfloat ty = s_Ty[es][i];

                     dTxdr += Drni*tx;
                     dTxds += Dsni*tx;

                     dTydr += Drni*ty;
                     dTyds += Dsni*ty;
                  }

               const dfloat lt = drdx*dTxdr + dsdx*dTxds + drdy*dTydr + dsdy*dTyds;

               LT[id]=lt;
            }
         }
      }
  @barrier("local");

      for(int es=0; es<p_NblockV;++es;@inner(1)){
         for(int n=0;n<p_maxNodes;++n;@inner(0)){
           const dlong e = eo+es;
            if(e<Nelements){
               if(n<p_Nfp*p_Nfaces){
                  // find face that owns this node
                  const int face =n/p_Nfp;
                  //load surface geofactors for this face
                  const dlong sid   = p_Nsgeo*(e*p_Nfaces+face);
                  const dfloat nx    = sgeo[sid+p_NXID];
                  const dfloat ny    = sgeo[sid+p_NYID];
                  const dfloat sJ    = sgeo[sid+p_SJID];
                  const dfloat invJ = sgeo[sid+p_IJID];

                  //indices of negative and positive traces of face node
                  const dlong id = e*p_Nfp*p_Nfaces +n;
                  const dlong idM = vmapM[id];
                  const dlong idP = vmapP[id];

                  // load negative and postive trace node values of Tx and Ty
                  dfloat TxM = Tx[idM];
                  dfloat TxP = Tx[idP];
                  dfloat TyM = Ty[idM];
                  dfloat TyP = Ty[idP];

                  const dfloat sc = invJ * sJ;
                  s_fluxTot[es][n] = .5f*sc*nx*((TxP-TxM)+ny*(TyP-TyM));
               }
            }
         }
      }
      // Wait for all flux functions to be written into @shared
      @barrier("local");

      // for each node in the element
      for(int es=0;es<p_NblockS;++es;@inner(1)){
         for(int n=0;n<p_maxNodes;++n;@inner(0)){
          const dlong e = eo + es;
           if(e<Nelements){
               if(n<p_Np){    
                   const dlong id = e*p_Np + n;
                  dfloat lt = LT[id];
                  #pragma unroll p_NfacesNfp
                     for(int m=0;m<p_Nfaces*p_Nfp;++m){
                        const dfloat L = LIFTT[n+m*p_Np];
                        lt += L*s_fluxTot[es][m];
                     }
                  LT[id] = lt;
               }
            }
         }
      }
   }
}
